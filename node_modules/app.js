const express = require("express")
const socket = require('socket.io')
const app = express();
app.use(express.static('public'))
const http = require("http");
const expressHTTPServer = http.createServer(app);
const io = new socket.Server(expressHTTPServer)


app.get("/", (req, res) => {
    res.sendFile(`${__dirname}/room.html`)
})






io.on('connection', (socket) => {

    // get online users
    function getOnlineUsers() {
        const sids = io.sockets.adapter.sids.keys()
        const users = [];
        [...sids].forEach(id => {

            const user = {
                id,
                name: io.sockets.sockets.get(id)?.name
            }

            if (user.name) {

                users.push(user)
            }
        })

        return users;
    }




    // get public rooms
    async function getPublicRooms() {
        const rooms = await io.sockets.adapter.rooms;
        const sids = await io.sockets.adapter.sids;
        const roomKeys = [...rooms.keys()];
        const sidsKeys = [...sids.keys()];
        const publicRooms = []


        function participants(users) {
            const participantArray = []
            for (let user of users) {
                const userSocket = io.sockets.sockets.get(user)
                participantArray.push({
                    id: userSocket.id,
                    name: userSocket?.name,
                })
            }
            return participantArray;
        }


        let id = 0;
        for (let room of roomKeys) {
            if (!sidsKeys.includes(room)) {

                const users = rooms.get(room);
                const roomDetails = {
                    id :  "aaaaaaaaa" + id + "bb",
                    size: rooms.get(room).size,
                    name: room,
                    participants: participants(users)
                }
                publicRooms.push(roomDetails);
                ++id

            }
        }


        return publicRooms;

    }

    // send message
    socket.on("new-message", (msg, cb) => {
        socket.broadcast.emit("receive_msg", msg, socket.name)
        cb()
    })

    // set username
    socket.on("setname", (name, cb) => {
        socket.name = name;
        const onlineUsers = getOnlineUsers()
        socket.broadcast.emit('getOnlineUserUpdate', onlineUsers)
        cb(getOnlineUsers())
    })
    // set username
    socket.on('joinRoom', async (roomName, cb) => {
        socket.join(roomName)
        const publicRooms = await getPublicRooms();
        cb(publicRooms)
        socket.broadcast.emit('public_room', publicRooms)
    })

    // send a private meassage
    socket.on('private_msg', (data, cb) => {
        if (data.room) {
            socket.to(data.id).emit('private_msg', data, socket.id);
        } else {
            io.to(data.id).emit('private_msg', data, socket.id);
        }
       
       cb()
    })

    socket.on('create-room', async (roomName, cb) => {

        socket.join(roomName)
        const publicRooms = await getPublicRooms();
        cb(publicRooms)
        socket.broadcast.emit('public_room', publicRooms)


    })
    socket.on('getPublicRoom', async ( cb) => {

        const publicRooms = await getPublicRooms();
        cb(publicRooms)
       
    })





})



expressHTTPServer.listen(3000, () => {
    console.log("Server is running on port @3000");
})